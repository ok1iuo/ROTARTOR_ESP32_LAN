#include "eth.h" // Zahrnutí vlastního hlavičkového souboru

#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_netif.h"
#include "esp_eth.h" // Hlavní hlavičkový soubor pro Ethernet
#include "esp_event.h"
#include "esp_log.h"
#include "driver/gpio.h"
#include "esp_eth_mac_esp.h" // Přidáno pro eth_esp32_emac_config_t
#include "esp_eth_com.h"


static const char *TAG_ETH = "ETH_LAN8720"; // Změněn TAG pro odlišení od main

/**
 * @brief Event handler for Ethernet events
 * Tato funkce zpracovává události na úrovni Ethernet linky (start, connected, disconnected, stop).
 */
static void eth_event_handler(void *arg, esp_event_base_t event_base,
                              int32_t event_id, void *event_data)
{
    uint8_t mac_addr[6] = {0};
    /* Z event dat můžeme získat handle Ethernet ovladače */
    esp_eth_handle_t eth_handle = *(esp_eth_handle_t *)event_data;

    switch (event_id) {
    case ETHERNET_EVENT_START:
        ESP_LOGI(TAG_ETH, "Ethernet Link Layer Started");
        // Volitelné: nastavení hostname pro mDNS nebo jiné síťové služby
        // esp_eth_set_hostname(eth_handle, "esp32-ethernet");
        break;
    case ETHERNET_EVENT_CONNECTED:
        ESP_LOGI(TAG_ETH, "Ethernet Link Layer Connected");
        // Získání a výpis MAC adresy
        esp_eth_ioctl(eth_handle, ETH_CMD_G_MAC_ADDR, mac_addr);
        ESP_LOGI(TAG_ETH, "Ethernet HW Addr %02x:%02x:%02x:%02x:%02x:%02x",
                 mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
        break;
    case ETHERNET_EVENT_DISCONNECTED:
        ESP_LOGI(TAG_ETH, "Ethernet Link Layer Disconnected");
        break;
    case ETHERNET_EVENT_STOP:
        ESP_LOGI(TAG_ETH, "Ethernet Link Layer Stopped");
        break;
    default:
        break;
    }
}

/**
 * @brief Event handler for IP_EVENT_ETH_GOT_IP
 * Tato funkce zpracovává událost získání IP adresy přes Ethernet (obvykle z DHCP serveru).
 */
static void got_ip_event_handler(void *arg, esp_event_base_t event_base,
                                 int32_t event_id, void *event_data)
{
    ip_event_got_ip_t *event = (ip_event_got_ip_t *)event_data;
    const esp_netif_ip_info_t *ip_info = &event->ip_info;

    ESP_LOGI(TAG_ETH, "Ethernet Got IP Address");
    ESP_LOGI(TAG_ETH, "~~~~~~~~~~~");
    ESP_LOGI(TAG_ETH, "ETHIP:" IPSTR, IP2STR(&ip_info->ip));
    ESP_LOGI(TAG_ETH, "ETHMASK:" IPSTR, IP2STR(&ip_info->netmask));
    ESP_LOGI(TAG_ETH, "ETHGW:" IPSTR, IP2STR(&ip_info->gw));
    ESP_LOGI(TAG_ETH, "~~~~~~~~~~~");
}

esp_err_t ethernet_init(void)
{

    ESP_LOGI(TAG_ETH, "Ethernet_init");

    // Konfigurace MAC (Media Access Controller) a PHY (Physical Layer).
    eth_mac_config_t mac_config = ETH_MAC_DEFAULT_CONFIG();
    eth_phy_config_t phy_config = ETH_PHY_DEFAULT_CONFIG();

    // Konfigurace specifická pro ESP32 EMAC a RMII rozhraní
    eth_esp32_emac_config_t esp32_emac_config = ETH_ESP32_EMAC_DEFAULT_CONFIG();

    // Nastavení pinů pro MDIO a MDC v konfiguraci ESP32 EMAC
    // Tyto členy jsou v ESP-IDF 5.4 označeny jako deprecated, ale stále by měly fungovat.
    // Novější verze mohou používat jinou metodu (např. smi_gpio).
//    esp32_emac_config.smi_mdc_gpio_num = ETH_PHY_MDC_DEFAULT;
//    esp32_emac_config.smi_mdio_gpio_num = ETH_PHY_MDIO_DEFAULT;

    // Nastavení pinu pro referenční hodiny a režimu hodin v konfiguraci ESP32 EMAC
    // ETH_CLOCK_GPIO0_IN znamená, že 50MHz hodiny jsou vstupem na GPIO0.
    // V ESP-IDF 5.4 se režim hodin nastavuje pomocí enum emac_clk_mode_t
    // a GPIO pin pro hodiny se nastavuje zvlášť.
    // esp32_emac_config.clock_config.rmii.clock_mode = EMAC_CLK_MODE_INPUT; // Správná konstanta pro vstup hodin v ESP-IDF 5.4
    // esp32_emac_config.clock_config.rmii.clock_gpio = GPIO_NUM_0; // Referenční hodiny na GPIO0
    // Člen 'crs_dv_enable' ve struktuře clock_config.rmii se v ESP-IDF 5.4 zřejmě nenachází nebo má jiný název.
    // Odstraněno: esp32_emac_config.clock_config.rmii.crs_dv_enable = 1;

    // Piny pro RMII datové linky na ESP32 jsou pevně dané a nelze je měnit.
    // Je důležité zkontrolovat, že vaše hardware zapojení odpovídá těmto pinům.
    // V novějších verzích ESP-IDF se tyto piny často nemusí explicitně nastavit
    // v eth_esp32_emac_config_t, pokud používáte defaultní konfiguraci,
    // ale pro jistotu je zde necháme komentované pro referenci.
    // esp32_emac_config.rmii_cfg.rmii_txd0_gpio = 19; // TXD0
    // esp32_emac_config.rmii_cfg.rmii_txd1_gpio = 22; // TXD1
    // esp32_emac_config.rmii_cfg.rmii_tx_en_gpio = 21; // TX_EN (Transmit Enable)
    // esp32_emac_config.rmii_cfg.rmii_rxd0_gpio = 25; // RXD0
    // esp32_emac_config.rmii_cfg.rmii_rxd1_gpio = 26; // RXD1
    // esp32_emac_config.rmii_cfg.rmii_rx_er_gpio = 27; // RX_ER (Receive Error)

    // Nastavení adresy PHY v obecné PHY konfiguraci
    phy_config.phy_addr = ETH_PHY_ADDR_DEFAULT;
    // Nastavení resetovacího pinu v obecné PHY konfiguraci
    phy_config.reset_gpio_num = ETH_NRST_PIN_DEFAULT;

    // Piny PHY_POWER a NRST_PIN se obvykle nezpracovávají přímo v mac_config nebo phy_config
    // v rámci standardní inicializace ovladače, pokud nejsou součástí reset_gpio_num.
    // Pokud je ETH_PHY_POWER_DEFAULT platný GPIO pin (> -1),
    // je potřeba ho ovládat pomocí GPIO driveru pro zapnutí/vypnutí PHY.
    // Následující blok kódu ukazuje, jak na to, pokud je pin definován.
    ESP_LOGI(TAG_ETH, "Ethernet_init phy power on ");

    if (ETH_PHY_POWER_DEFAULT >= 0) {
        // Inicializace power pinu jako výstup a zapnutí PHY
        gpio_set_direction(ETH_PHY_POWER_DEFAULT, GPIO_MODE_OUTPUT);
        gpio_set_level(ETH_PHY_POWER_DEFAULT, 1); // Předpokládá active-high pro zapnutí
        vTaskDelay(pdMS_TO_TICKS(50)); // Krátké zpoždění po zapnutí
     }
    // Resetovací pin je nyní součástí phy_config.reset_gpio_num,
    // ovladač by se o něj měl postarat automaticky, pokud je > -1.
    // Pokud byste potřebovali manuální kontrolu, použijte podobný kód jako pro power pin.


    // Vytvoření MAC a PHY instancí na základě konfigurace.
    // Funkce pro vytvoření MAC a PHY se liší.
    ESP_LOGI(TAG_ETH, "Ethernet_init esp_eth_mac_new_esp32()");
    esp_eth_mac_t *mac = esp_eth_mac_new_esp32(&esp32_emac_config, &mac_config); // Správná funkce a argumenty pro ESP32 MAC
    ESP_LOGI(TAG_ETH, "Ethernet_init esp_eth_mac_new_lan87xx()");
    esp_eth_phy_t *phy = esp_eth_phy_new_lan87xx(&phy_config); // Správná funkce pro LAN87xx PHY

    // Konfigurace a instalace Ethernet ovladače.
    esp_eth_config_t eth_config = ETH_DEFAULT_CONFIG(mac, phy);
    esp_eth_handle_t eth_handle = NULL;

    ESP_LOGI(TAG_ETH, "Ethernet_init esp_eth_driver_install");
    ESP_ERROR_CHECK(esp_eth_driver_install(&eth_config, &eth_handle));

        // Vytvoření a inicializace defaultního Ethernet netifu (síťového rozhraní)
    esp_netif_config_t netif_cfg = ESP_NETIF_DEFAULT_ETH();
    ESP_LOGI(TAG_ETH, "Ethernet_init esp_etif_new");
    esp_netif_t *eth_netif = esp_netif_new(&netif_cfg);

    // Inicializace TCP/IP stacku.
    ESP_ERROR_CHECK(esp_netif_init());
    // Vytvoření defaultního event loopu.
    ESP_ERROR_CHECK(esp_event_loop_create_default());



    /* Propojení Ethernet ovladače s TCP/IP stackem */
    ESP_ERROR_CHECK(esp_netif_attach(eth_netif, esp_eth_new_netif_glue(eth_handle)));

    // Registrace event handlerů pro sledování stavu Ethernetu a získání IP.
    // Event base pro Ethernet je ETH_EVENT.
    ESP_ERROR_CHECK(esp_event_handler_register(ETH_EVENT, ESP_EVENT_ANY_ID, &eth_event_handler, NULL));
    ESP_ERROR_CHECK(esp_event_handler_register(IP_EVENT, IP_EVENT_ETH_GOT_IP, &got_ip_event_handler, NULL));

    // Spuštění Ethernet MAC driveru. Tím se zahájí proces navazování spojení.
    ESP_ERROR_CHECK(esp_eth_start(eth_handle));

    // Vytvoření a inicializace defaultního Ethernet netifu (síťového rozhraní).
//    esp_netif_config_t netif_cfg = ESP_NETIF_DEFAULT_ETH();
//    esp_netif_t *eth_netif = esp_netif_new(&netif_cfg);


    return ESP_OK; // Vracíme úspěch
}
